plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
ggplot(res_H1573_plots)+
geom_point(aes(x = log2FoldChange, y = -log10(padj), color = interaction(threshold, threshold_2)))+
xlab("log 2 fold change")+
ylab("-log10 adjusted p-value")+
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
install.packages("devtools")
library(devtools)
install_github("js229/Vennerable")
library(Vennerable)
library(DESeq2)
library(ggplot2)
library(tidyverse)
library(annotables)
library(tximport)
library(tximportData)
library(pheatmap)
library(RColorBrewer)
sig_A549_list <- sig_A549 %>%
rownames_to_column(var="ensgene")
#--------------------------------------A549
res_A549 <- results(diff_exp_A549, alpha = 0.05, lfcThreshold = 1)
diff_exp_A549 <- DESeq(Dds_A549)
##Select the samples which have replicates to crete new count matrix
H1573 <- count.matrix %>% select(H1573_CT_1, H1573_CT_2, H1573_CDDP_1, H1573_CDDP_2)
H1299 <- count.matrix %>% select(H1299_CT_1, H1299_CT_2, H1299_CDDP_1, H1299_CDDP_2)
A549 <- count.matrix %>% select(A549_CT_1, A549_CT_2, A549_CDDP_1, A549_CDDP_2)
###Create the count matrix for every cell line along with its replicate
##First, set the name of the samples using the "Name" column
column_names <- samples$Name
colnames(count.matrix) <- column_names
##Select the samples which have replicates to crete new count matrix
H1573 <- count.matrix %>% select(H1573_CT_1, H1573_CT_2, H1573_CDDP_1, H1573_CDDP_2)
H1299 <- count.matrix %>% select(H1299_CT_1, H1299_CT_2, H1299_CDDP_1, H1299_CDDP_2)
A549 <- count.matrix %>% select(A549_CT_1, A549_CT_2, A549_CDDP_1, A549_CDDP_2)
column_names
BiocManager::install("GeneAnswers")
library(GeneAnswers)
direc <- ("~/RNASeq/Deleterious-alleles-in-landraces-of-maize/Arteaga_et_al_2016/Data/")
table <- read.table(file.path(direc, "Galaxy51-[Convert_on_data_50](original).tabular"), he = T)
head(table)
names(table)
table$X2_maiz_68[which(table$X2_maiz_68 == "1/0"), ] <- "M"
table$X2_maiz_68[(table$X2_maiz_68 == "1/0")] <- "M"
table$X2_maiz_68[(table$X2_maiz_68 == "1/0"), ] <- "M"
table <- read.table(file.path(direc, "Galaxy51-[Convert_on_data_50](original).tabular"), he = T)
table$X2_maiz_68[(table$X2_maiz_68 == "1/0"), ] <- "M"
table <- read.table(file.path(direc, "Galaxy51-[Convert_on_data_50](original).tabular"), he = T)
table$X2_maiz_68[table$X2_maiz_68 == "1/0"] <- "M"
table <- read.table(file.path(direc, "Galaxy51-[Convert_on_data_50](original).tabular"), he = T)
head(table$X2_maiz_68)
table$X2_maiz_68[table$X2_maiz_68 == 1/0] <- "M"
table <- read.table(file.path(direc, "Galaxy51-[Convert_on_data_50](original).tabular"), he = T)
table_2 <- read.csv(file.path(direc, "vcf_en_csv.csv"), he = T, sep = ",")
head(table_2)
names(table_2)
table_2 <- read.csv(file.path(direc, "vcf_en_csv.csv"), he = F, sep = ",")
names(table_2)
table_2 <- read.csv(file.path(direc, "vcf_en_csv.csv"), sep = ",")
names(table_2)
table_2 <- read.csv(file.path(direc, "vcf_en_csv.csv"), he = T)
names(table_2)
table <- read.table(file.path(direc, "Galaxy51-[Convert_on_data_50](original).tabular"), he = T)
class(table$X2_maiz_68)
table$X2_maiz_68[table$X2_maiz_68=="1/0"] <- "M"
table <- read.table(file.path(direc, "Galaxy51-[Convert_on_data_50](original).tabular"), he = T)
table$X2_maiz_68 <- as.character(table$X2_maiz_68)
class(table$X2_maiz_68)
table$X2_maiz_68[table$X2_maiz_68=="1/0"] <- "M"
head(table$X2_maiz_68)
head(table$X2_maiz_68, n=30)
table$X2_maiz_68[table$X2_maiz_68=="0/1"] <- "R"
#Take a look at the first 30 rows of the variable table$X2_maiz_68
head(table$X2_maiz_68, n = 30)
#Take a look at the first 30 rows of the variable table$X2_maiz_68
tail(table$X2_maiz_68, n = 30)
library(DESeq2)
library(ggplot2)
library(tidyverse)
library(annotables)
library(tximport)
library(tximportData)
library(pheatmap)
library(RColorBrewer)
library(Vennerable)
library(gplots)
##Volcano Plots
res_H1573_plots <- data.frame(res_H1573)
res_H1573$condition <- ifelse((res_H1573$log2FoldChange > 1) & (res_H1573$padj < 0.05), "Over-expressed",
ifelse((res_H1573$log2FoldChange < -1) & (res_H1573$padj < 0.05), "Sub-expressed",
ifelse((res_H1573$log2FoldChange > 1) & (res_H1573$padj > 0.05), "NS",
ifelse((res_H1573$log2FoldChange < -1) & (res_H1573$padj > 0.05), "NS",
ifelse((res_H1573$log2FoldChange < 1) & (res_H1573$padj > 0.05), "NS", "NS")))))
ggplot(res_H1573)+
geom_point(aes(x = log2FoldChange, y = -log10(padj), color = condition))+
scale_color_manual(values = c("#6e6d6e","#d84b47","#3c7ae7"))+
geom_vline(aes(xintercept = 1), linetype = "dashed")+
geom_vline(aes(xintercept = -1), linetype = "dashed")+
geom_hline(aes(yintercept = -log10(0.05)), linetype = "dashed")+
scale_fill_discrete(name = "Genes", labels = c("NS", "Over-expressed", "Sub-expressed", "NA"))
res_H1573_plots$condition <- ifelse((res_H1573_plots$log2FoldChange > 1) & (res_H1573_plots$padj < 0.05), "Over-expressed",
ifelse((res_H1573_plots$log2FoldChange < -1) & (res_H1573_plots$padj < 0.05), "Sub-expressed",
ifelse((res_H1573_plots$log2FoldChange > 1) & (res_H1573_plots$padj > 0.05), "NS",
ifelse((res_H1573_plots$log2FoldChange < -1) & (res_H1573_plots$padj > 0.05), "NS",
ifelse((res_H1573_plots$log2FoldChange < 1) & (res_H1573_plots$padj > 0.05), "NS", "NS")))))
ggplot(res_H1573_plots)+
geom_point(aes(x = log2FoldChange, y = -log10(padj), color = condition))+
scale_color_manual(values = c("#6e6d6e","#d84b47","#3c7ae7"))+
geom_vline(aes(xintercept = 1), linetype = "dashed")+
geom_vline(aes(xintercept = -1), linetype = "dashed")+
geom_hline(aes(yintercept = -log10(0.05)), linetype = "dashed")+
scale_fill_discrete(name = "Genes", labels = c("NS", "Over-expressed", "Sub-expressed", "NA"))
ggplot(res_H1573_plots)+
geom_point(aes(x = log2FoldChange, y = -log10(padj), color = condition))+
scale_color_manual(values = c("#6e6d6e","#d84b47","#3c7ae7"))+
geom_vline(aes(xintercept = 1), linetype = "dashed")+
geom_vline(aes(xintercept = -1), linetype = "dashed")+
geom_hline(aes(yintercept = -log10(0.05)), linetype = "dashed")+
scale_fill_discrete(name = "Genes", labels = c("NS", "Over-expressed", "Sub-expressed"))
ggplot(res_H1573_plots)+
geom_point(aes(x = log2FoldChange, y = -log10(padj), color = condition))+
scale_color_manual(labels = c("NS", "Over-expressed", "Sub-expressed"), values = c("#6e6d6e","#d84b47","#3c7ae7"))+
geom_vline(aes(xintercept = 1), linetype = "dashed")+
geom_vline(aes(xintercept = -1), linetype = "dashed")+
geom_hline(aes(yintercept = -log10(0.05)), linetype = "dashed")
ggplot(res_H1573_plots)+
geom_point(aes(x = log2FoldChange, y = -log10(padj), color = condition))+
scale_color_manual(labels = c("ns", "Over-expressed", "Sub-expressed"), values = c("#6e6d6e","#d84b47","#3c7ae7"))+
geom_vline(aes(xintercept = 1), linetype = "dashed")+
geom_vline(aes(xintercept = -1), linetype = "dashed")+
geom_hline(aes(yintercept = -log10(0.05)), linetype = "dashed")
ggplot(res_H1573_plots)+
geom_point(aes(x = log2FoldChange, y = -log10(padj), color = condition))+
scale_color_manual(labels = c("NS", "Over-expressed", "Sub-expressed"), values = c("#6e6d6e","#d84b47","#3c7ae7"))+
geom_vline(aes(xintercept = 1), linetype = "dashed")+
geom_vline(aes(xintercept = -1), linetype = "dashed")+
geom_hline(aes(yintercept = -log10(0.05)), linetype = "dashed")
res_H1573_plots$condition <- na.omit()
res_H1573_plots$condition <- na.omit(res_H1573_plots$condition)
length(unique(na.omit(res_H1573_plots$condition)))
length(na.omit(res_H1573_plots$condition))
###----------------------------------------------------------------------
BiocManager::install("statmod")
library(statmod)
library(edgeR)
###Set wd for the course
setwd("~/RNASeq/ccg/bin/")
###Load the count matrix
countFile <- "../Diff/all_tally_counts.tab.gz"
head(counts0, 12)
###Read the count matrix
counts0 <- read.table(countFile)
head(counts0, 12)
counts0["GATGACCAACCGGCTGTGGAAGC", ]
### at least one cpm in at least 2 conditions
keep = rowSums(cpm(counts0) >= 1) >= 2
counts = counts0[keep,]
colnames(counts)
group <- factor(sub("_r.+", "", colnames(counts)))
table(group)
dge <- DGEList(counts=counts, group=group)
group
table(filterByExpr(counts0))
###Unsupervised clustering analysis
colors = rainbow(length(levels(group)))
names(colors) = levels(group)
plotMDS(dge, col=colors[dge$samples$group], labels=colnames(dge$counts))
###Calculate norm factors
dge <- calcNormFactors(dge)
dge$samples
for (i in c(3,4,5,7)) {
plotMD(cpm(dge, log=TRUE), column=i)
grid(col = "blue")
abline(h=0, col='red', lty=2, lwd=2)
}
par(mfrow=c(1,2))
for (i in c(3,4,5,7)) {
plotMD(cpm(dge, log=TRUE), column=i)
grid(col = "blue")
abline(h=0, col='red', lty=2, lwd=2)
}
###Eliminate most separated samples
badSamples <- c("MODEK_EV_r1","Pure_EV_r1","Pure_EV_r2")
colnames(counts0)
colnames(counts0) %in% badSamples
colnames(counts0) %in% badSamples
counts <- counts0[,!colnames(counts0) %in% badSamples]
keep = rowSums(cpm(counts) >= 1) >= 2
table(keep)
counts <- counts[keep,]
group = factor(sub("_r.+", "", colnames(counts)))
group
dge = DGEList(counts=counts, group=group)
dge <- calcNormFactors(dge)
###First, load the packages
library(DESeq2)
library(ggplot2)
library(tidyverse)
library(annotables)
library(tximport)
library(pheatmap)
library(heatmaply)
library(RColorBrewer)
library(Vennerable)
library(gplots)
source("~/Google Drive/PCB/Doctorado/2020-1/Bioinformatica/Lung_cancer_transcriptome/bin/functions.R")
###Import the data generated from RSEM gene counting
##Set the directory in which the data is stored
mydir <- ("~/RNAseq/Lung_cancer_transcriptome/data/rsem/")
##Charge the metadata table
samples <- read.table(file.path(mydir, "metadata.txt"), header = T)
##Charge the files generated from RSEM
files <- file.path(mydir, "rsem", samples$Sample, paste0(samples$Sample, ".genes.results"))
names(files) <- paste0("sample", 1:28)
#Corroborate that all the files are properly charged
all(file.exists(files))
##Charge the files generated from RSEM
files <- file.path(mydir, "rsem", samples$Sample, paste0(samples$Sample, ".genes.results"))
names(files) <- paste0("sample", 1:2)
#Corroborate that all the files are properly charged
all(file.exists(files))
##Charge the metadata table
samples <- read.table(file.path(mydir, "metadata.txt"), header = T)
##Charge the files generated from RSEM
files <- file.path(mydir, "rsem", samples$Sample, paste0(samples$Sample, ".genes.results"))
names(files) <- paste0("sample", 1:2)
#Corroborate that all the files are properly charged
all(file.exists(files))
##Load the count matrix and assign it into an object
txi.rsem <- tximport(files, type = "rsem", txIn = F, txOut = F)
#Create the count matrix
count.matrix <- txi.rsem$counts
#Recodificate the class of the count matrix (as.data.frame and as.integer)
storage.mode(count.matrix) = "integer"
count.matrix <- as.data.frame(count.matrix)
###Create the count matrix for every cell line along with its replicate
##First, set the name of the samples using the "Name" column
column_names <- samples$Name
colnames(count.matrix) <- column_names
##Select the samples which have replicates to crete new count matrix
H1573 <- count.matrix %>% select(H1573_CT_1, H1573_CT_2, H1573_CDDP_1, H1573_CDDP_2)
H1299 <- count.matrix %>% select(H1299_CT_1, H1299_CT_2, H1299_CT_3, H1299_CDDP_1, H1299_CDDP_2, H1299_CDDP_3)
A549 <- count.matrix %>% select(A549_CT_1, A549_CT_2, A549_CT_3, A549_CDDP_1, A549_CDDP_2, A549_CDDP_3)
TB1A <- count.matrix %>% select(`3B1A_CT_1`, `3B1A_CT_2`, `3B1A_CDDP_1`, `3B1A_CDDP_2`)
##Create the metadata table for each cell line
#Vectors with the name of the cell lines
line_H1573 <- c("H1573", "H1573", "H1573", "H1573")
line_H1299 <- c("H1299", "H1299", "H1299", "H1299", "H1299", "H1299")
line_A549 <- c("A549", "A549", "A549", "A549", "A549", "A549")
line_TB1A <- c("3B1A", "3B1A", "3B1A", "3B1A")
#Condition for each group
condition <- c("control", "control", "cddp", "cddp")
condition2 <- c("control", "control", "control", "cddp", "cddp", "cddp")
#Make the data frames for every cell line
meta_H1573 <- data.frame(line_H1573, condition)
meta_H1299 <- data.frame(line_H1299, condition2)
meta_A549 <- data.frame(line_A549, condition2)
meta_TB1A <- data.frame(line_TB1A, condition)
#Create the name of the row names for the data frames
row.names(meta_H1573) <- c(colnames(H1573))
row.names(meta_H1299) <- c(colnames(H1299))
row.names(meta_A549) <- c(colnames(A549))
row.names(meta_TB1A) <- c(colnames(TB1A))
#Sanity check
all(row.names(meta_H1573)==colnames(H1573))
all(row.names(meta_H1299)==colnames(H1299))
all(row.names(meta_A549)==colnames(A549))
all(row.names(meta_TB1A)==colnames(TB1A))
###-------------------------------------------------------------------
##Create the DESeq object for each cell line
#Using the metadata table and the count matrix for each cell line, create the DESeq object
Dds_H1573 <- deseq_object(H1573, meta_H1573)
Dds_3B1A <- deseq_object(TB1A, meta_TB1A)
Dds_A549 <- deseq_object_trip(A549, meta_A549)
Dds_H1299 <- deseq_object_trip(H1299, meta_H1299)
#Specify the refference group
Dds_H1573$condition <- relevel(Dds_H1573$condition, ref = "control")
Dds_H1299$condition2 <- relevel(Dds_H1299$condition2, ref = "control")
Dds_A549$condition2 <- relevel(Dds_A549$condition2, ref = "control")
Dds_3B1A$condition <- relevel(Dds_3B1A$condition, ref = "control")
#Filter genes with low counts, threshold of 10
keep_H1573 <- rowSums(counts(Dds_H1573)) >=10
keep_H1299 <- rowSums(counts(Dds_H1299)) >=10
keep_A549 <- rowSums(counts(Dds_A549)) >=10
keep_3B1A <- rowSums(counts(Dds_3B1A)) >=10
keep_3B1A
table(keep_3B1A)
#Filter genes with low counts, threshold of 10
keep_H1573 <- rowSums(counts(Dds_H1573)) >=10
keep_H1299 <- rowSums(counts(Dds_H1299)) >=10
keep_A549 <- rowSums(counts(Dds_A549)) >=10
keep_3B1A <- rowSums(counts(Dds_3B1A)) >=10
Dds_H1573 <- Dds_H1573[keep_H1573,]
Dds_H1299 <- Dds_H1299[keep_H1299,]
Dds_A549 <- Dds_A549[keep_A549,]
Dds_3B1A <- Dds_3B1A[keep_3B1A,]
#DE analysis
diff_exp_H1573 <- DESeq(Dds_H1573)
diff_exp_H1299 <- DESeq(Dds_H1299)
diff_exp_A549 <- DESeq(Dds_A549)
diff_exp_3B1A <- DESeq(Dds_3B1A)
Dds_3B1A
sizeFactors(Dds_3B1A)
###-------------------------------------------------------------------
##Create the DESeq object for each cell line
#Using the metadata table and the count matrix for each cell line, create the DESeq object
Dds_H1573 <- deseq_object(H1573, meta_H1573)
Dds_3B1A <- deseq_object(TB1A, meta_TB1A)
Dds_A549 <- deseq_object_trip(A549, meta_A549)
Dds_H1299 <- deseq_object_trip(H1299, meta_H1299)
#Specify the refference group
Dds_H1573$condition <- relevel(Dds_H1573$condition, ref = "control")
Dds_H1299$condition2 <- relevel(Dds_H1299$condition2, ref = "control")
Dds_A549$condition2 <- relevel(Dds_A549$condition2, ref = "control")
Dds_3B1A$condition <- relevel(Dds_3B1A$condition, ref = "control")
#Filter genes with low counts, threshold of 10
keep_H1573 <- rowSums(counts(Dds_H1573)) >=10
keep_H1299 <- rowSums(counts(Dds_H1299)) >=10
keep_A549 <- rowSums(counts(Dds_A549)) >=10
keep_3B1A <- rowSums(counts(Dds_3B1A)) >=10
Dds_H1573 <- Dds_H1573[keep_H1573,]
Dds_H1299 <- Dds_H1299[keep_H1299,]
Dds_A549 <- Dds_A549[keep_A549,]
Dds_3B1A <- Dds_3B1A[keep_3B1A,]
#DE analysis
diff_exp_H1573 <- DESeq(Dds_H1573)
diff_exp_H1299 <- DESeq(Dds_H1299)
diff_exp_A549 <- DESeq(Dds_A549)
diff_exp_3B1A <- DESeq(Dds_3B1A)
sizeFactors(diff_exp_3B1A)
sizeFactors(diff_exp_A549)
sizeFactors(diff_exp_H1299)
sizeFactors(diff_exp_H1573)
#Store significant differentially expresed genes
sig_H1573 <- signif_deg(res_H1573)
#Store the results from DE analysis in a new object, use a threshold of alpha = 0.05 and lfcThreshold = 1
res_H1573 <- Dds_results(diff_exp_H1573)
res_H1299 <- Dds_results(diff_exp_H1299)
res_A549 <- Dds_results(diff_exp_A549)
res_3B1A <- Dds_results(diff_exp_3B1A)
#Store significant differentially expresed genes
sig_H1573 <- signif_deg(res_H1573)
sig_H1299 <- signif_deg(res_H1299)
sig_A549 <- signif_deg(res_A549)
sig_3B1A <- signif_deg(res_3B1A)
###Plots
##In order to study the variance of the replicates in each condition, perform an unsupervised clustering analysis
vsd_H1573 <- replicate_analysis(Dds_H1573)
vsd_H1299 <- replicate_analysis(Dds_H1299)
vsd_A549 <- replicate_analysis(Dds_A549)
vsd_3B1A <- replicate_analysis(Dds_3B1A)
##Plot the correlation matrix using a heatmap
pheatmap(vsd_H1573, annotation = select(meta_H1573, condition))
pheatmap(vsd_H1299, annotation = select(meta_H1299, condition2))
pheatmap(vsd_A549, annotation = select(meta_A549, condition2))
pheatmap(vsd_3B1A, annotation = select(meta_TB1A, condition))
plotPCA(vsd_3B1A, intgroup = "condition")
vsd_A549b <- vst(Dds_A549, blind = T)
plotPCA(vsd_A549b, intgroup = "condition")
plotPCA(vsd_A549b, intgroup = "condition2")
remove(vsd_A549b)
plotMA(res_3B1A)
plotMA(res_A549)
plotMA(res_H1573)
plotMA(res_H1299)
plotMDS(res_3B1A)
plotMD(res_3B1A)
plotMD(res_3B1A)
plotMD(Dds_3B1A)
plotMD(diff_exp_3B1A)
library(edgeR)
library(statmod)
###Load the count matrix
countFile <- "../Diff/all_tally_counts.tab.gz"
###Read the count matrix
counts0 <- read.table(countFile)
###Inspect the matrix
head(counts0, 12)
counts0["GATGACCAACCGGCTGTGGAAGC", ]
### at least one cpm in at least 2 conditions
keep = rowSums(cpm(counts0) >= 1) >= 2
counts = counts0[keep,]
###Create the table of metadata
colnames(counts)
group <- factor(sub("_r.+", "", colnames(counts)))
table(group)
###Create DGE object (like DESeq)
dge <- DGEList(counts=counts, group=group)
###Unsupervised clustering analysis
colors = rainbow(length(levels(group)))
names(colors) = levels(group)
plotMDS(dge, col=colors[dge$samples$group], labels=colnames(dge$counts))
###Calculate norm factors
dge <- calcNormFactors(dge)
dge$samples
###Visualize the effect of normalization
par(mfrow=c(1,2))
for (i in c(3,4,5,7)) {
plotMD(cpm(dge, log=TRUE), column=i)
grid(col = "blue")
abline(h=0, col='red', lty=2, lwd=2)
}
###Eliminate most separated samples
badSamples <- c("MODEK_EV_r1","Pure_EV_r1","Pure_EV_r2")
colnames(counts0)
colnames(counts0) %in% badSamples
counts <- counts0[,!colnames(counts0) %in% badSamples]
keep <- rowSums(cpm(counts) >= 1) >= 2
table(keep)
counts <- counts[keep,]
group <- factor(sub("_r.+", "", colnames(counts)))
group
dge <- DGEList(counts=counts, group=group)
dge <- calcNormFactors(dge)
design = model.matrix(~0+dge$samples$group)
design
colnames(design) = levels(dge$samples$group)
design
dge = estimateDisp(dge, design=design, robust=TRUE)
contrasts = makeContrasts(
"EV_effect" = "MODEK_EV - MODEK_ctrl",
levels=dge$design
)
contrasts
fit = glmFit(dge, dispersion=dge$common.dispersion)
lrt <- glmLRT(fit, contrast=contrast)
##Specify the contrast levels for comparission
contrasts <- makeContrasts(
"EV_effect" = "MODEK_EV - MODEK_ctrl",
levels=dge$design
)
contrasts
fit = glmFit(dge, dispersion=dge$common.dispersion)
lrt <- glmLRT(fit, contrast=contrast)
contrasts <- contrast[, 1]
contrasts <- contrasts[, 1]
fit = glmFit(dge, dispersion=dge$common.dispersion)
lrt <- glmLRT(fit, contrast=contrast)
lrt <- glmLRT(fit, contrasts=contrasts)
fit = glmFit(dge, dispersion=dge$common.dispersion)
lrt <- glmLRT(fit, contrasts=contrasts)
topTags(lrt)
contrast = contrasts[,1]
contrast
##Specify the contrast levels for comparission
contrasts <- makeContrasts(
"EV_effect" = "MODEK_EV - MODEK_ctrl",
levels=dge$design
)
contrast = contrasts[,1]
contrast
fit = glmFit(dge, dispersion=dge$common.dispersion)
lrt <- glmLRT(fit, contrast=contrast)
topTags(lrt)
###Import the data generated from RSEM gene counting
##Set the directory in which the data is stored
mydir <- ("~/RNAseq/Lung_cancer_transcriptome/data/rsem/")
##Charge the metadata table
samples <- read.table(file.path(mydir, "metadata.txt"), header = T)
##Charge the files generated from RSEM
files <- file.path(mydir, "rsem", samples$Sample, paste0(samples$Sample, ".genes.results"))
names(files) <- paste0("sample", 1:28)
#Corroborate that all the files are properly charged
all(file.exists(files))
##Load the count matrix and assign it into an object
txi.rsem <- tximport(files, type = "rsem", txIn = F, txOut = F)
#Create the count matrix
count.matrix <- txi.rsem$counts
#Recodificate the class of the count matrix (as.data.frame and as.integer)
storage.mode(count.matrix) = "integer"
count.matrix <- as.data.frame(count.matrix)
###Create the count matrix for every cell line along with its replicate
##First, set the name of the samples using the "Name" column
column_names <- samples$Name
colnames(count.matrix) <- column_names
##Select the samples which have replicates to crete new count matrix
H1573 <- count.matrix %>% select(H1573_CT_1, H1573_CT_2, H1573_CDDP_1, H1573_CDDP_2)
H1299 <- count.matrix %>% select(H1299_CT_1, H1299_CT_2, H1299_CT_3, H1299_CDDP_1, H1299_CDDP_2, H1299_CDDP_3)
A549 <- count.matrix %>% select(A549_CT_1, A549_CT_2, A549_CT_3, A549_CDDP_1, A549_CDDP_2, A549_CDDP_3)
TB1A <- count.matrix %>% select(`3B1A_CT_1`, `3B1A_CT_2`, `3B1A_CDDP_1`, `3B1A_CDDP_2`)
##Create the metadata table for each cell line
#Vectors with the name of the cell lines
line_H1573 <- c("H1573", "H1573", "H1573", "H1573")
line_H1299 <- c("H1299", "H1299", "H1299", "H1299", "H1299", "H1299")
line_A549 <- c("A549", "A549", "A549", "A549", "A549", "A549")
line_TB1A <- c("3B1A", "3B1A", "3B1A", "3B1A")
#Condition for each group
condition <- c("control", "control", "cddp", "cddp")
condition2 <- c("control", "control", "control", "cddp", "cddp", "cddp")
#Make the data frames for every cell line
meta_H1573 <- data.frame(line_H1573, condition)
meta_H1299 <- data.frame(line_H1299, condition2)
meta_A549 <- data.frame(line_A549, condition2)
meta_TB1A <- data.frame(line_TB1A, condition)
#Create the name of the row names for the data frames
row.names(meta_H1573) <- c(colnames(H1573))
row.names(meta_H1299) <- c(colnames(H1299))
row.names(meta_A549) <- c(colnames(A549))
row.names(meta_TB1A) <- c(colnames(TB1A))
#Sanity check
all(row.names(meta_H1573)==colnames(H1573))
all(row.names(meta_H1299)==colnames(H1299))
all(row.names(meta_A549)==colnames(A549))
all(row.names(meta_TB1A)==colnames(TB1A))
###-------------------------------------------------------------------
##Create the DESeq object for each cell line
#Using the metadata table and the count matrix for each cell line, create the DESeq object
Dds_H1573 <- deseq_object(H1573, meta_H1573)
knitr::opts_chunk$set(echo = TRUE)
